heat_template_version: '2018-08-31'

description: CIAP Template

#>===========================================================================<#
#>=======                         Parameters                          =======<#
#>===========================================================================<#
parameters:
  public_net:
    type: string
    default: public
    description: >
      ID or name of public network for which floating IP addresses will be allocated

  server_image:
    type: string
    description: Id of CentOS 7 image

  server_flavor:
    type: string
    default: m1.small
    description: Flavor desired

  deploy_plug:
    type: boolean
    default: yes
    description: Deploy a plug server

  cidr:
    type: string
    default: 10.1.0.0/24
    description: CIDR

  ssh_username:
    type: string
    default: ciap
    description: User name ssh

  ssh_public_key:
    type: string
    description: Admin public key

  openstack_rc:
    type: string

  container_name:
    type: string

  ansible_tarball:
    type: string
    
#>===========================================================================<#
#>=======                          Resources                          =======<#
#>===========================================================================<#
resources:
#>================================= KEYPAIR =================================<#
  ssh_key:
    type: OS::Nova::KeyPair
    properties:
      name: ciap
      save_private_key: True
      
#>================================= ROUTER ==================================<#
  ciap_router:
    type: OS::Neutron::Router
    properties:
      name: CIAP Router
      external_gateway_info:
        network: { get_param: public_net }

#>============================= FILTERED ZONE ============================<#
  filtered_network:
    type: OS::Neutron::Net
    properties:
      name: CIAP Filtered Network

  filtered_subnet:
    type: OS::Neutron::Subnet
    properties:
      name: CIAP Filtered Subnet
      network_id: { get_resource: filtered_network }
      cidr:
        str_replace:
          template: cidr_0.cidr_8.cidr_16.0/27
          params:
            cidr_0:  { str_split: ['.', { get_param: cidr }, 0] }
            cidr_8:  { str_split: ['.', { get_param: cidr }, 1] }
            cidr_16: { str_split: ['.', { get_param: cidr }, 2] }
      dns_nameservers: [ "1.1.1.1", "1.0.0.1" ]

  filtered_router_interface:
    type: OS::Neutron::RouterInterface
    properties:
      router_id: { get_resource: ciap_router }
      subnet_id: { get_resource: filtered_subnet }
      
  mid_waf_servers:
    type: OS::Heat::AutoScalingGroup
    properties:
      min_size: 1
      max_size: 3
      resource:
        type: OS::Nova::Server
        properties:
          name: ciap-mid-waf
          image: { get_param: server_image }
          flavor: { get_param: server_flavor }
          networks:
            - port: { get_resource: mid_waf_port }
          user_data:
            str_replace:
              template: |
                #cloud-config
                users:
                  - name: $NAME
                    sudo: ALL=(ALL) NOPASSWD:ALL # TODO DELETE
                    groups: sudo # TODO DELETE
                    ssh_authorized_keys:
                      - $PUBLIC_KEY
                    shell: /bin/bash
                disable_root: true
              params:
                $NAME: { get_param: ssh_username }
                $PUBLIC_KEY: { get_attr: [ssh_key, public_key] }
          user_data_format: RAW
          metadata: { ssh_user: { get_param: ssh_username } }

  mid_waf_port:
    type: OS::Neutron::Port
    properties:
      network_id: { get_resource: filtered_network }
      fixed_ips:
        - subnet_id: { get_resource: filtered_subnet }

  mid_waf_scaleup_policy:
    type: OS::Heat::ScalingPolicy
    properties:
      adjustment_type: change_in_capacity
      auto_scaling_group_id: { get_resource: mid_waf_servers }
      cooldown: 60
      scaling_adjustment: 1

  mid_waf_scaledown_policy:
    type: OS::Heat::ScalingPolicy
    properties:
      adjustment_type: change_in_capacity
      auto_scaling_group_id: { get_resource: mid_waf_servers }
      cooldown: 60
      scaling_adjustment: -1

  mid_waf_cpu_alarm_high:
    type: OS::Aodh::GnocchiAggregationByResourcesAlarm
    properties:
      description: Scale up if CPU > 80%
      metric: cpu_util
      aggregation_method: mean
      granularity: 300
      evaluation_periods: 1
      threshold: 80
      resource_type: instance
      comparison_operator: gt
      alarm_actions:
        - str_replace:
            template: trust+url
            params:
              url: {get_attr: [mid_waf_scaleup_policy, signal_url]}
      query:
        list_join:
          - ''
          - - {'=': {server_group: {get_param: "OS::stack_id"}}}

  mid_waf_cpu_alarm_low:
    type: OS::Aodh::GnocchiAggregationByResourcesAlarm
    properties:
      description: Scale down if CPU < 15% for 5 minutes
      metric: cpu_util
      aggregation_method: mean
      granularity: 300
      evaluation_periods: 1
      threshold: 15
      resource_type: instance
      comparison_operator: lt
      alarm_actions:
        - str_replace:
            template: trust+url
            params:
              url: {get_attr: [mid_waf_scaledown_policy, signal_url]}
      query:
        list_join:
          - ''
          - - {'=': {server_group: {get_param: "OS::stack_id"}}}

  lb:
    type: OS::Octavia::LoadBalancer
    properties:
      vip_subnet: { get_resource: filtered_subnet }
      
  listener:
    type: OS::Octavia::Listener
    properties:
      loadbalancer: { get_resource: lb }
      protocol: HTTP
      protocol_port: 80
      
  pool:
    type: OS::Octavia::Pool
    properties:
      listener: { get_resource: listener }
      lb_algorithm: ROUND_ROBIN
      protocol: HTTP
      session_persistence:
        type: SOURCE_IP
        
  lb_monitor:
    type: OS::Octavia::HealthMonitor
    properties:
      pool: { get_resource: pool }
      type: TCP
      delay: 5
      max_retries: 5
      timeout: 5

  lb_floating:
    type: OS::Neutron::FloatingIP
    properties:
      floating_network: { get_param: public_net }
      port_id: { get_attr: [lb, vip_port_id] }

#>============================== ADMIN ZONE ==============================<#
  admin_network:
    type: OS::Neutron::Net
    properties:
      name: CIAP Admin Network

  admin_subnet:
    type: OS::Neutron::Subnet
    properties:
      name: CIAP Admin Subnet
      network_id: { get_resource: admin_network }
      cidr:
        str_replace:
          template: cidr_0.cidr_8.cidr_16.192/27
          params:
            cidr_0:  { str_split: ['.', { get_param: cidr }, 0] }
            cidr_8:  { str_split: ['.', { get_param: cidr }, 1] }
            cidr_16: { str_split: ['.', { get_param: cidr }, 2] }
      dns_nameservers: [ "1.1.1.1", "1.0.0.1" ]

  admin_router_interface:
    type: OS::Neutron::RouterInterface
    properties:
      router_id: { get_resource: ciap_router }
      subnet_id: { get_resource: admin_subnet }

  admin_server_boot_config:
    type: OS::Heat::CloudConfig
    properties:
      cloud_config:
        users:
          - name: { get_param: ssh_username }
            sudo: ALL=(ALL) NOPASSWD:ALL # TODO DELETE
            groups: sudo # TODO DELETE
            ssh_authorized_keys:
              - { get_param: ssh_public_key }
            shell: /bin/bash
        disable_root: true
        # Update/Upgrade & Reboot if necessary
        package_update: true
        package_upgrade: true

  admin_server_boot_script:
    type: OS::Heat::SoftwareConfig
    properties:
      config:
        str_replace:
          template: |
            #!/bin/bash
            cd /home/$USERNAME
            # Install private key
            echo -n "$PRIVATE_KEY" > .ssh/id_rsa
            chmod 600 .ssh/id_rsa
            chown $USERNAME:$USERNAME .ssh/id_rsa

            # Secure SSH
            sed -i 's/#PermitRootLogin yes/PermitRootLogin no/g' /etc/ssh/sshd_config
            
            # Install packages [DISTRO = distro name & DISTRO_V = distro version]
            DISTRO=$(grep "^ID=" /etc/os-release |cut -d "=" -f 2 | sed -e 's/^"//' -e 's/"$//')
            DISTRO_V=$(grep "^VERSION_ID=" /etc/os-release |cut -d "=" -f 2 | sed -e 's/^"//' -e 's/"$//')
            
            if [[ "$DISTRO" = "centos" ]]; then
                yum install -y epel-release
                yum install -y vim-enhanced emacs-nox nano
                yum install -y htop wget ansible
                yum install -y gcc openssl-devel bzip2
                yum install -y python36 python36-pip python36-wheel python36-devel python36-virtualenv
            fi
            
            if [[ "$DISTRO" = "ubuntu" ]] || [[ "$DISTRO" = "debian" ]] ; then
                apt install -y vim-enhanced emacs-nox nano
                apt install -y htop wget ansible
            fi

            pip3 install python-openstackclient

            # Setup Openstack RC
            echo '$OPENSTACK_RC' > .openstackrc
            echo '# Source Openstack RC
            if [ -f ~/.openstackrc ]; then
                . ~/.openstackrc
            fi' >> .bashrc
            source .openstackrc

            openstack object save $CONTAINER $ANSIBLE_TARBALL
            tar -jxvf $ANSIBLE_TARBALL
            rm $ANSIBLE_TARBALL

          params:
            $USERNAME: { get_param: ssh_username }
            $PRIVATE_KEY: { get_attr: [ssh_key, private_key] }
            $OPENSTACK_RC: { get_param: openstack_rc }
            $CONTAINER: { get_param: container_name }
            $ANSIBLE_TARBALL: { get_param: ansible_tarball }

  server_init:
    type: OS::Heat::MultipartMime
    properties:
      parts:
      - config: {get_resource: admin_server_boot_config}
      - config: {get_resource: admin_server_boot_script}

  admin_server:
    type: OS::Nova::Server
    properties:
      name: ciap-admin
      image: { get_param: server_image }
      flavor: { get_param: server_flavor }
      networks:
        - port: { get_resource: admin_port }
      user_data_format: SOFTWARE_CONFIG
      user_data: { get_resource: server_init }

  admin_port:
    type: OS::Neutron::Port
    properties:
      network_id: { get_resource: admin_network }
      fixed_ips:
        - subnet_id: { get_resource: admin_subnet }
      #security_groups:
        #- { get_resource: admin_security_group }

  admin_floating_ip:
    type: OS::Neutron::FloatingIP
    properties:
      floating_network: { get_param: public_net }
      port_id: { get_resource: admin_port }

  admin_security_group:
    type: OS::Neutron::SecurityGroup
    properties:
      rules:
         # Ingress:
         - { remote_ip_prefix: 0.0.0.0/0, direction: ingress, protocol: tcp, port_range_min: 22, port_range_max: 22 }
         - { remote_ip_prefix: 0.0.0.0/0, direction: ingress, protocol: icmp }
         # Egress:
         - { remote_ip_prefix: 0.0.0.0/0, direction: egress, protocol: icmp }
         - { remote_ip_prefix: 0.0.0.0/0, direction: egress, protocol: tcp, port_range_min: 22,  port_range_max: 22 }
         - { remote_ip_prefix: 0.0.0.0/0, direction: egress, protocol: tcp, port_range_min: 80,  port_range_max: 80  }
         - { remote_ip_prefix: 0.0.0.0/0, direction: egress, protocol: tcp, port_range_min: 443, port_range_max: 443 }

#>============================== PLUG ZONE ==============================<#
  plug_network:
    type: OS::Neutron::Net
    condition: { get_param: deploy_plug }
    properties:
      name: CIAP Plug Network

  plug_subnet:
    type: OS::Neutron::Subnet
    condition: { get_param: deploy_plug }
    properties:
      name: CIAP Plug Subnet
      network_id: { get_resource: plug_network }
      cidr:
        str_replace:
          template: cidr_0.cidr_8.cidr_16.224/27
          params:
            cidr_0:  { str_split: ['.', { get_param: cidr }, 0] }
            cidr_8:  { str_split: ['.', { get_param: cidr }, 1] }
            cidr_16: { str_split: ['.', { get_param: cidr }, 2] }
      dns_nameservers: [ "1.1.1.1", "1.0.0.1" ]

  plug_router_interface:
    type: OS::Neutron::RouterInterface
    condition: { get_param: deploy_plug }
    properties:
      router_id: { get_resource: ciap_router }
      subnet_id: { get_resource: plug_subnet }

  plug_server:
    type: OS::Nova::Server
    condition: { get_param: deploy_plug }
    properties:
      name: ciap-plug
      image: { get_param: server_image }
      flavor: { get_param: server_flavor }
      networks:
        - port: { get_resource: plug_port }
      user_data:
        str_replace:
          template: |
            #cloud-config
            users:
              - name: $NAME
                sudo: ALL=(ALL) NOPASSWD:ALL # TODO DELETE
                groups: sudo # TODO DELETE
                ssh_authorized_keys:
                  - $PUBLIC_KEY
                shell: /bin/bash
            disable_root: true
          params:
            $NAME: { get_param: ssh_username }
            $PUBLIC_KEY: { get_attr: [ssh_key, public_key] }
      user_data_format: RAW
      metadata: { ssh_user: { get_param: ssh_username } }

  plug_port:
    type: OS::Neutron::Port
    condition: { get_param: deploy_plug }
    properties:
      network_id: { get_resource: plug_network }
      fixed_ips:
        - subnet_id: { get_resource: plug_subnet }
      #security_groups:
        #- { get_resource: plug_security_group }

  plug_security_group:
    type: OS::Neutron::SecurityGroup
    properties:
      rules:
         # Ingress:
         - { remote_ip_prefix: 0.0.0.0/0, direction: ingress, protocol: tcp, port_range_min: 80,  port_range_max: 80  }
         - { remote_ip_prefix: 0.0.0.0/0, direction: ingress, protocol: tcp, port_range_min: 443, port_range_max: 443 }
         - { remote_ip_prefix: 0.0.0.0/0, direction: ingress, protocol: icmp }

#>===========================================================================<#
#>=======                           Outputs                           =======<#
#>===========================================================================<#
outputs:
  admin_ip:
    description: Floating IP address of admin server
    value: { get_attr: [ admin_floating_ip, floating_ip_address ]}

  public_ip:
    description: Floating IP address of ciap
    value: { get_attr: [ lb_floating, floating_ip_address] }
