- name: create openvpn key directory
  file:
    path: "{{openvpn_key_dir}}"
    state: directory

- name: create openvpn ccd directory
  file:
    path: "{{openvpn_ccd_dir}}"
    state: directory

- name: create openvpn ovpn directory
  file:
    path: "{{openvpn_ovpn_dir}}"
    state: directory

- name: create openvpn clients archive configuration directory
  file:
    path: "{{openvpn_clients_dir}}"
    state: directory

- name: Copy openssl server/ca extensions
  run_once: true
  copy:
    src: "{{item}}"
    dest: "{{openvpn_key_dir}}"
    owner: root
    group: root
    backup: yes
    force: yes
    mode: 0400
  with_items:
    - openssl-server.ext
    - openssl-ca.ext
  notify:
    - restart openvpn

- name: Generate CA key
  command: openssl req -nodes -newkey rsa:{{openvpn_rsa_bits}} -keyout {{ openvpn_ca_key_name }}  -out {{ openvpn_ca_csr_name }} -days {{ openvpn_ca_validity_days }} -subj /CN={{ openvpn_ca_name }}/
  run_once: true
  args:
    chdir: "{{openvpn_key_dir}}"
    creates: "{{ openvpn_ca_key_name }}"
  notify:
    - restart openvpn

- name: protect CA key
  run_once: true
  file:
    path: "{{openvpn_key_dir}}/{{ openvpn_ca_key_name }}"
    mode: 0400

- name: Sign CA key
  command: openssl x509 -req -in {{ openvpn_ca_csr_name }} -out {{ openvpn_ca_crt_name }} -CAcreateserial -signkey {{ openvpn_ca_key_name }} -sha256 -days {{ openvpn_ca_validity_days }} -extfile openssl-ca.ext
  run_once: true
  args:
    chdir: "{{openvpn_key_dir}}"
    creates: "{{ openvpn_ca_crt_name }}"
  notify:
    - restart openvpn

- name: generate server key
  run_once: true
  command: openssl req -nodes -newkey rsa:{{openvpn_rsa_bits}} -keyout server.key -out server.csr -days {{ openvpn_ca_validity_days }} -subj /CN={{ openvpn_server_name }}/
  args:
    chdir: "{{openvpn_key_dir}}"
    creates: server.key
  notify:
    - restart openvpn

- name: protect server key
  run_once: true
  file:
    path: "{{openvpn_key_dir}}/server.key"
    mode: 0400

- name: sign server key
  run_once: true
  command: openssl x509 -req -in server.csr -out server.crt -CA {{ openvpn_ca_crt_name }} -CAkey {{ openvpn_ca_key_name }} -sha256 -days {{ openvpn_ca_validity_days }} -CAcreateserial -extfile openssl-server.ext
  args:
    chdir: "{{openvpn_key_dir}}"
    creates: server.crt
  notify:
    - restart openvpn

- name: generate tls-auth key
  run_once: true
  command: openvpn --genkey --secret {{ openvpn_ta_key_name }}
  args:
    chdir: "{{openvpn_key_dir}}"
    creates: "{{ openvpn_ta_key_name }}"
  notify:
    - restart openvpn

- name: generate dh params
  run_once: true 
  command: openssl dhparam -out {{openvpn_key_dir}}/dh.pem {{openvpn_rsa_bits}}
  args:
    chdir: "{{openvpn_key_dir}}"
    creates: dh.pem
  notify:
    - restart openvpn

- name: install ca.conf config file
  run_once: true
  template:
    src: ca.conf.j2
    dest: "{{openvpn_key_dir}}/ca.conf"
    owner: root
    group: root
    mode: 0744
    backup: yes
    force: yes
  notify:
    - restart openvpn

- name: create initial certificate revocation list squence number
  run_once: true
  shell: "echo 00 > crl_number"
  args:
    chdir: "{{openvpn_key_dir}}"
    creates: crl_number

- name: install revocation script
  run_once: true
  template:
    src: revoke.sh.j2
    dest: "{{openvpn_key_dir}}/revoke.sh"
    owner: root
    group: root
    mode: 0744
    backup: yes
    force: yes

- name: ensure certificate revocation list database exists
  run_once: true
  file:
    path: "{{openvpn_key_dir}}/index.txt"
    state: touch

- name: set up certificate revocation list
  run_once: true
  command: sh revoke.sh
  args:
    chdir: "{{ openvpn_key_dir }}"
    creates: "{{ openvpn_key_dir }}/{{ openvpn_crl_name }}"

- name: set openvpn service name - systemd
  set_fact:
    openvpn_service_name: "openvpn@{{openvpn_config_file}}.service"

- name: create openvpn config file
  template:
    src: server.conf.j2
    dest: "{{ openvpn_base_dir }}/{{openvpn_config_file}}.conf"
    owner: root
    group: root
    backup: yes
    force: yes
  notify:
    - restart openvpn

- name: copy openvpn logrotate config file
  copy:
    src: openvpn_logrotate.conf
    dest: /etc/logrotate.d/openvpn.conf
    owner: root
    group: root
    mode: 0400
    backup: yes
    force: yes

- name: setup openvpn auto-start & start
  service:
    name: "{{openvpn_service_name}}"
    enabled: yes
    state: started

