output {
  if [database] == "{{ item[0].domain | replace('.', '_') }}" {
    if [fields][log_type] == "suricata" {
#      if ([event_type] == "stats") {
#        influxdb {
#          host => "{{ v_metrology_influxdb_host }}"
#          user => "{{ v_metrology_influxdb_user }}"
#          password => "{{ v_metrology_influxdb_password }}"
#          port => {{ v_metrology_influxdb_port }}
#          data_points => {
#            "event_timestamp" => "%{[timestamp]}"
#            "event_type" => "%{[event_type]}"
#            "uptime" => "%{[stats][uptime]}"
#            "decoder_pkts" => "%{[stats][decoder][pkts]}"
#            "decoder_bytes" => "%{[stats][decoder][bytes]}"
#            "decoder_invalid" => "%{[stats][decoder][invalid]}"
#            "decoder_ipv4" => "%{[stats][decoder][ipv4]}"
#            "decoder_ipv6" => "%{[stats][decoder][ipv6]}"
#            "decoder_ethernet" => "%{[stats][decoder][ethernet]}"
#            "decoder_raw" => "%{[stats][decoder][raw]}"
#            "decoder_null" => "%{[stats][decoder][null]}"
#            "decoder_sll" => "%{[stats][decoder][sll]}"
#            "decoder_tcp" => "%{[stats][decoder][tcp]}"
#            "decoder_udp" => "%{[stats][decoder][udp]}"
#            "decoder_sctp" => "%{[stats][decoder][sctp]}"
#            "decoder_icmpv4" => "%{[stats][decoder][icmpv4]}"
#            "decoder_icmpv6" => "%{[stats][decoder][icmpv6]}"
#            "decoder_ppp" => "%{[stats][decoder][ppp]}"
#            "decoder_pppoe" => "%{[stats][decoder][pppoe]}"
#            "decoder_gre" => "%{[stats][decoder][gre]}"
#            "decoder_vlan" => "%{[stats][decoder][vlan]}"
#            "decoder_vlan_qinq" => "%{[stats][decoder][vlan_qinq]}"
#            "decoder_ieee8021ah" => "%{[stats][decoder][ieee8021ah]}"
#            "decoder_teredo" => "%{[stats][decoder][teredo]}"
#            "decoder_ipv4_in_ipv6" => "%{[stats][decoder][ipv4_in_ipv6]}"
#            "decoder_ipv6_in_ipv6" => "%{[stats][decoder][ipv6_in_ipv6]}"
#            "decoder_mpls" => "%{[stats][decoder][mpls]}"
#            "decoder_avg_pkt_size" => "%{[stats][decoder][avg_pkt_size]}"
#            "decoder_max_pkt_size" => "%{[stats][decoder][max_pkt_size]}"
#            "decoder_erspan" => "%{[stats][decoder][erspan]}"
#            "decoder_ipraw_invalid_ip_version" => "%{[stats][decoder][ipraw][invalid_ip_version]}"
#            "decoder_ltnull_pkt_too_small" => "%{[stats][decoder][ltnull][pkt_too_small]}"
#            "decoder_ltnull_unsupported_type" => "%{[stats][decoder][ltnull][unsupported_type]}"
#            "decoder_dce_pkt_too_small" => "%{[stats][decoder][dce][pkt_too_small]}"
#            "flow_memcap" => "%{[stats][flow][memcap]}"
#            "flow_tcp" => "%{[stats][flow][tcp]}"
#            "flow_udp" => "%{[stats][flow][udp]}"
#            "flow_icmpv4" => "%{[stats][flow][icmpv4]}"
#            "flow_icmpv6" => "%{[stats][flow][icmpv6]}"
#            "flow_spare" => "%{[stats][flow][spare]}"
#            "flow_emerg_mode_entered" => "%{[stats][flow][emerg_mode_entered]}"
#            "flow_emerg_mode_over" => "%{[stats][flow][emerg_mode_over]}"
#            "flow_tcp_reuse" => "%{[stats][flow][tcp_reuse]}"
#            "flow_memuse" => "%{[stats][flow][memuse]}"
#            "defrag_ipv4_fragments" => "%{[stats][defrag][ipv4][fragments]}"
#            "defrag_ipv4_reassembled" => "%{[stats][defrag][ipv4][reassembled]}"
#            "defrag_ipv4_timeouts" => "%{[stats][defrag][ipv4][timeouts]}"
#            "defrag_ipv6_fragments" => "%{[stats][defrag][ipv6][fragments]}"
#            "defrag_ipv6_reassembled" => "%{[stats][defrag][ipv6][reassembled]}"
#            "defrag_ipv6_timeouts" => "%{[stats][defrag][ipv6][timeouts]}"
#            "defrag_max_frag_hits" => "%{[stats][defrag][max_frag_hits]}"
#            "tcp_sessions" => "%{[stats][tcp][sessions]}"
#            "tcp_ssn_memcap_drop" => "%{[stats][tcp][ssn_memcap_drop]}"
#            "tcp_pseudo" => "%{[stats][tcp][pseudo]}"
#            "tcp_pseudo_failed" => "%{[stats][tcp][pseudo_failed]}"
#            "tcp_invalid_checksum" => "%{[stats][tcp][invalid_checksum]}"
#            "tcp_no_flow" => "%{[stats][tcp][no_flow]}"
#            "tcp_syn" => "%{[stats][tcp][syn]}"
#            "tcp_synack" => "%{[stats][tcp][synack]}"
#            "tcp_rst" => "%{[stats][tcp][rst]}"
#            "tcp_segment_memcap_drop" => "%{[stats][tcp][segment_memcap_drop]}"
#            "tcp_stream_depth_reached" => "%{[stats][tcp][stream_depth_reached]}"
#            "tcp_reassembly_gap" => "%{[stats][tcp][reassembly_gap]}"
#            "tcp_overlap" => "%{[stats][tcp][overlap]}"
#            "tcp_overlap_diff_data" => "%{[stats][tcp][diff_data]}"
#            "tcp_insert_data_normal_fail" => "%{[stats][tcp][insert_data_normal_fail]}"
#            "tcp_insert_data_overlap_fail" => "%{[stats][tcp][insert_data_overlap_fail]}"
#            "tcp_insert_list_fail" => "%{[stats][tcp][insert_list_fail]}"
#            "tcp_memuse" => "%{[stats][tcp][memuse]}"
#            "tcp_reassembly_memuse" => "%{[stats][tcp][reassembly_memuse]}"
#            "detect_alert" => "%{[stats][detect][alert]}"
#            "app_layer_flow_http" => "%{[stats][app_layer][flow][http]}"
#            "app_layer_flow_tls" => "%{[stats][app_layer][flow][tls]}"
#            "app_layer_flow_imap" => "%{[stats][app_layer][flow][imap]}"
#            "app_layer_flow_tls" => "%{[stats][app_layer][flow][tls]}"
#            "app_layer_flow_imap" => "%{[stats][app_layer][flow][imap]}"
#            "app_layer_flow_msn" => "%{[stats][app_layer][flow][msn]}"
#            "app_layer_flow_failed_tcp" => "%{[stats][app_layer][flow][failed_tcp]}"
#            "app_layer_flow_failed_udp" => "%{[stats][app_layer][flow][failed_udp]}"
#            "app_layer_tx_http" => "%{[stats][app_layer][tx][http]}"
#            "app_layer_tx_tls" => "%{[stats][app_layer][tx][tls]}"
#            "ips_accepted" => "%{[stats][ips][accepted]}"
#            "ips_blocked" => "%{[stats][ips][blocked]}"
#            "ips_rejected" => "%{[stats][ips][rejected]}"
#            "ips_replaced" => "%{[stats][ips][replaced]}"
#            "flow_mgr_closed_pruned" => "%{[stats][flow_mgr][closed_pruned]}"
#            "flow_mgr_new_pruned" => "%{[stats][flow_mgr][new_pruned]}"
#            "flow_mgr_est_pruned" => "%{[stats][flow_mgr][est_pruned]}"
#            "flow_mgr_bypassed_pruned" => "%{[stats][flow_mgr][bypassed_pruned]}"
#            "flow_mgr_flows_checked" => "%{[stats][flow_mgr][flows_checked]}"
#            "flow_mgr_flows_notimeout" => "%{[stats][flow_mgr][flows_notimeout]}"
#            "flow_mgr_flows_notimeout_inuse" => "%{[stats][flow_mgr][flows_notimeout_inuse]}"
#            "flow_mgr_flows_removed" => "%{[stats][flow_mgr][flows_removed]}"
#            "flow_mgr_rows_checked" => "%{[stats][flow_mgr][rows_checked]}"
#            "flow_mgr_rows_skipped" => "%{[stats][flow_mgr][rows_skipped]}"
#            "flow_mgr_rows_empty" => "%{[stats][flow_mgr][rows_empty]}"
#            "flow_mgr_rows_busy" => "%{[stats][flow_mgr][rows_busy]}"
#            "flow_mgr_rows_maxlen" => "%{[stats][flow_mgr][rows_maxlen]}"
#            "file_store_open_files" => "%{[stats][file_store][open_files]}"
#            "dns_memuse" => "%{[stats][dns][memuse]}"
#            "dns_memcap_state" => "%{[stats][dns][memcap_state]}"
#            "dns_memcap_global" => "%{[stats][dns][memcap_global]}"
#            "http_memuse" => "%{[stats][http][memuse]}"
#            "http_memcap" => "%{[stats][http][memcap]}"
#            "domain" => "%{[fields][domain]}"
#          }
#          coerce_values => {
#            "decoder_pkts" => "integer"
#            "decoder_bytes" => "integer"
#            "decoder_invalid" => "integer"
#            "decoder_ipv4" => "integer"
#            "decoder_ipv6" => "integer"
#            "decoder_ethernet" => "integer"
#            "decoder_raw" => "integer"
#            "decoder_null" => "integer"
#            "decoder_sll" => "integer"
#            "decoder_tcp" => "integer"
#            "decoder_udp" => "integer"
#            "decoder_sctp" => "integer"
#            "decoder_icmpv4" => "integer"
#            "decoder_icmpv6" => "integer"
#            "decoder_ppp" => "integer"
#            "decoder_pppoe" => "integer"
#            "decoder_gre" => "integer"
#            "decoder_vlan" => "integer"
#            "decoder_vlan_qinq" => "integer"
#            "decoder_ieee8021ah" => "integer"
#            "decoder_teredo" => "integer"
#            "decoder_ipv4_in_ipv6" => "integer"
#            "decoder_ipv6_in_ipv6" => "integer"
#            "decoder_mpls" => "integer"
#            "decoder_avg_pkt_size" => "integer"
#            "decoder_max_pkt_size" => "integer"
#            "decoder_erspan" => "integer"
#            "decoder_ipraw_invalid_ip_version" => "integer"
#            "decoder_ltnull_pkt_too_small" => "integer"
#            "decoder_ltnull_unsupported_type" => "integer"
#            "decoder_dce_pkt_too_small" => "integer"
#            "flow_memcap" => "integer"
#            "flow_tcp" => "integer"
#            "flow_udp" => "integer"
#            "flow_icmpv4" => "integer"
#            "flow_icmpv6" => "integer"
#            "flow_spare" => "integer"
#            "flow_emerg_mode_entered" => "integer"
#            "flow_emerg_mode_over" => "integer"
#            "flow_tcp_reuse" => "integer"
#            "flow_memuse" => "integer"
#            "defrag_ipv4_fragments" => "integer"
#            "defrag_ipv4_reassembled" => "integer"
#            "defrag_ipv4_timeouts" => "integer"
#            "defrag_ipv6_fragments" => "integer"
#            "defrag_ipv6_reassembled" => "integer"
#            "defrag_ipv6_timeouts" => "integer"
#            "defrag_max_frag_hits" => "integer"
#            "defrag_ipv6_timeouts" => "integer"
#            "defrag_max_frag_hits" => "integer"
#            "tcp_sessions" => "integer"
#            "tcp_ssn_memcap_drop" => "integer"
#            "tcp_pseudo" => "integer"
#            "tcp_pseudo_failed" => "integer"
#            "tcp_invalid_checksum" => "integer"
#            "tcp_no_flow" => "integer"
#            "tcp_syn" => "integer"
#            "tcp_synack" => "integer"
#            "tcp_rst" => "integer"
#            "tcp_segment_memcap_drop" => "integer"
#            "tcp_stream_depth_reached" => "integer"
#            "tcp_reassembly_gap" => "integer"
#            "tcp_overlap" => "integer"
#            "tcp_overlap_diff_data" => "integer"
#            "tcp_insert_data_normal_fail" => "integer"
#            "tcp_insert_data_overlap_fail" => "integer"
#            "tcp_insert_list_fail" => "integer"
#            "tcp_memuse" => "integer"
#            "tcp_reassembly_memuse" => "integer"
#            "detect_alert" => "integer"
#            "app_layer_flow_http" => "integer"
#            "app_layer_flow_tls" => "integer"
#            "app_layer_flow_imap" => "integer"
#            "app_layer_flow_msn" => "integer"
#            "app_layer_flow_failed_tcp" => "integer"
#            "app_layer_flow_failed_udp" => "integer"
#            "app_layer_tx_http" => "integer"
#            "app_layer_tx_tls" => "integer"
#            "ips_accepted" => "integer"
#            "ips_blocked" => "integer"
#            "ips_rejected" => "integer"
#            "ips_replaced" => "integer"
#            "flow_mgr_closed_pruned" => "integer"
#            "flow_mgr_new_pruned" => "integer"
#            "flow_mgr_est_pruned" => "integer"
#            "flow_mgr_bypassed_pruned" => "integer"
#            "flow_mgr_flows_checked" => "integer"
#            "flow_mgr_flows_notimeout" => "integer"
#            "flow_mgr_flows_notimeout_inuse" => "integer"
#            "flow_mgr_flows_removed" => "integer"
#            "flow_mgr_rows_checked" => "integer"
#            "flow_mgr_rows_skipped" => "integer"
#            "flow_mgr_rows_empty" => "integer"
#            "flow_mgr_rows_busy" => "integer"
#            "flow_mgr_rows_maxlen" => "integer"
#            "file_store_open_files" => "integer"
#            "dns_memuse" => "integer"
#            "dns_memcap_state" => "integer"
#            "dns_memcap_global" => "integer"
#            "http_memuse" => "integer"
#            "http_memcap" => "integer"
#          }
#          measurement => "suricata_stats"
#          use_event_fields_for_data_points => false
#          allow_time_override => true
#          time_precision => "ms"
#          send_as_tags => [ "domain", "az", "ciap", "env", "fonction", "region", "stage", "genre" ]
#          db => "{{ item[0].domain | replace('.', '_') }}"
#          ssl => true
#        }
#      }

      if ([event_type] == "http") {
        influxdb {
          host => "{{ v_metrology_influxdb_host }}"
          user => "{{ v_metrology_influxdb_user }}"
          password => "{{ v_metrology_influxdb_password }}"
          port => {{ v_metrology_influxdb_port }}
          data_points => {
            "timestamp" => "%{[timestamp]}"
            "event_type" => "%{[event_type]}"
            "flow_id" => "%{[flow_id]}"
            "src_ip" => "%{[src_ip]}"
            "src_port" => "%{[src_port]}"
            "dest_ip" => "%{[dest_ip]}"
            "dest_port" => "%{[dest_port]}"
            "proto" => "%{[proto]}"
            "tx_id" => "%{[tx_id]}"
            "http_hostname" => "%{[http][hostname]}"
            "http_url" => "%{[http][url]}"
            "http_user_agent" => "%{[http][http_user_agent]}"
            "http_xff" => "%{[http][xff]}"
            "http_content_type" => "%{[http][http_content_type]}"
            "http_method" => "%{[http][http_method]}"
            "http_protocol" => "%{[http][protocol]}"
            "http_status" => "%{[http][status]}"
            "http_length" => "%{[http][length]}"
            "domain" => "%{[fields][domain]}"
          }
          coerce_values => {
            "flow_id" => "integer"
            "dest_port" => "integer"
            "src_port" => "integer"
            "tx_id" => "integer"
            "http_status" => "integer"
            "http_length" => "integer"
          }
          measurement => "suricata_http"
          use_event_fields_for_data_points => false
          allow_time_override => true
          time_precision => "ms"
          send_as_tags => [ "domain", "az", "ciap", "env", "fonction", "region", "stage", "genre" ]
          db => "{{ item[0].domain | replace('.', '_') }}"
          ssl => true
        }
      }

      if ([event_type] == "fileinfo") {
        influxdb {
          host => "{{ v_metrology_influxdb_host }}"
          user => "{{ v_metrology_influxdb_user }}"
          password => "{{ v_metrology_influxdb_password }}"
          port => {{ v_metrology_influxdb_port }}
          data_points => {
            "flow_id" => "%{[flow_id]}"
            "event_type" => "%{[event_type]}"
            "timestamp" => "%{[timestamp]}"
            "src_ip" => "%{[src_ip]}"
            "src_port" => "%{[src_port]}"
            "dest_ip" => "%{[dest_ip]}"
            "dest_port" => "%{[dest_port]}"
            "proto" => "%{[proto]}"
            "http_hostname" => "%{[http][hostname]}"
            "http_url" => "%{[http][url]}"
            "http_user_agent" => "%{[http][http_user_agent]}"
            "http_xff" => "%{[http][xff]}"
            "http_content_type" => "%{[http][http_content_type]}"
            "http_method" => "%{[http][http_method]}"
            "http_protocol" => "%{[http][protocol]}"
            "http_status" => "%{[http][status]}"
            "http_length" => "%{[http][length]}"
            "app_proto" => "%{[app_proto]}"
            "fileinfo_filename" => "%{[fileinfo][filename]}"
            "fileinfo_gaps" => "%{[fileinfo][gaps]}"
            "fileinfo_state" => "%{[fileinfo][state]}"
            "fileinfo_stored" => "%{[fileinfo][stored]}"
            "fileinfo_size" => "%{[fileinfo][size]}"
            "fileinfo_tx_id" => "%{[fileinfo][tx_id]}"
            "domain" => "%{[fields][domain]}"
          }
          coerce_values => {
            "flow_id" => "integer"
            "src_port" => "integer"
            "dest_port" => "integer"
            "http_status" => "integer"
            "http_length" => "integer"
            "fileinfo_stored" => "integer"
            "fileinfo_size" => "integer"
            "fileinfo_tx_id" => "integer"
          }
          measurement => "suricata_fileinfo"
          use_event_fields_for_data_points => false
          allow_time_override => true
          time_precision => "ms"
          send_as_tags => [ "domain", "az", "ciap", "env", "fonction", "region", "stage", "genre" ]
          db => "{{ item[0].domain | replace('.', '_') }}"
          ssl => true
        }
      }

      if ([event_type] == "alert") {
        influxdb {
          host => "{{ v_metrology_influxdb_host }}"
          user => "{{ v_metrology_influxdb_user }}"
          password => "{{ v_metrology_influxdb_password }}"
          port => {{ v_metrology_influxdb_port }}
          data_points => {
            "flow_id" => "%{[flow_id]}"
            "event_type" => "%{[event_type]}"
            "timestamp" => "%{[timestamp]}"
            "src_ip" => "%{[src_ip]}"
            "src_port" => "%{[src_port]}"
            "dest_ip" => "%{[dest_ip]}"
            "dest_port" => "%{[dest_port]}"
            "proto" => "%{[proto]}"
            "alert_action" => "%{[alert][action]}"
            "alert_gid" => "%{[alert][gid]}"
            "alert_signature_id" => "%{[alert][signature_id]}"
            "alert_rev" => "%{[alert][rev]}"
            "alert_signature" => "%{[alert][signature]}"
            "alert_category" => "%{[alert][category]}"
            "alert_severity" => "%{[alert][severity]}"
            "http_hostname" => "%{[http][hostname]}"
            "http_url" => "%{[http][url]}"
            "http_user_agent" => "%{[http][http_user_agent]}"
            "http_xff" => "%{[http][xff]}"
            "http_content-type" => "%{[http][http_content_type]}"
            "http_method" => "%{[http][http_method]}"
            "http_protocol" => "%{[http][protocol]}"
            "http_status" => "%{[http][status]}"
            "http_length" => "%{[http][length]}"
            "app_proto" => "%{[app_proto]}"
            "flow_pkts_toserver" => "%{[flow][pkts_toserver]}"
            "flow_pkts_toclient" => "%{[flow][pkts_toclient]}"
            "flow_bytes_toserver" => "%{[flow][bytes_toserver]}"
            "flow_bytes_toclient" => "%{[flow][bytes_toclient]}"
            "domain" => "%{[fields][domain]}"
          }
          coerce_values => {
            "alert_gid" => "integer"
            "alert_rev" => "integer"
            "alert_severity" => "integer"
            "flow_id" => "integer"
            "src_port" => "integer"
            "dest_port" => "integer"
            "http_status" => "integer"
            "http_length" => "integer"
            "flow_pkts_toserver" => "integer"
            "flow_pkts_toclient" => "integer"
            "flow_bytes_toserver" => "integer"
            "flow_bytes_toclient" => "integer"
          }
          measurement => "suricata_alert"
          use_event_fields_for_data_points => false
          allow_time_override => true
          time_precision => "ms"
          send_as_tags => [ "domain", "az", "ciap", "env", "fonction", "region", "stage", "genre" ]
          db => "{{ item[0].domain | replace('.', '_') }}"
          ssl => true
        }
      }

#      if ([event_type] == "drop") {
#        influxdb {
#          host => "{{ v_metrology_influxdb_host }}"
#          user => "{{ v_metrology_influxdb_user }}"
#          password => "{{ v_metrology_influxdb_password }}"
#          port => {{ v_metrology_influxdb_port }}
#          data_points => {
#            "flow_id" => "%{[flow_id]}"
#            "event_type" => "%{[event_type]}"
#            "timestamp" => "%{[timestamp]}"
#            "src_ip" => "%{[src_ip]}"
#            "src_port" => "%{[src_port]}"
#            "dest_ip" => "%{[dest_ip]}"
#            "dest_port" => "%{[dest_port]}"
#            "proto" => "%{[proto]}"
#            "drop_len" => "%{[drop][len]}"
#            "proto" => "%{[proto]}"
#            "drop_len" => "%{[drop][len]}"
#            "drop_tos" => "%{[drop][tos]}"
#            "drop_ttl" => "%{[drop][ttl]}"
#            "drop_ipid" => "%{[drop][ipid]}"
#            "drop_tcpseq" => "%{[drop][tcpseq]}"
#            "drop_tcpack" => "%{[drop][tcpack]}"
#            "drop_tcpwin" => "%{[drop][tcpwin]}"
#            "drop_syn" => "%{[drop][syn]}"
#            "drop_ack" => "%{[drop][ack]}"
#            "drop_psh" => "%{[drop][psh]}"
#            "drop_rst" => "%{[drop][rst]}"
#            "drop_urg" => "%{[drop][urg]}"
#            "drop_fin" => "%{[drop][fin]}"
#            "drop_tcpres" => "%{[drop][tcpres]}"
#            "drop_tcpurgp" => "%{[drop][tcpurgp]}"
#            "alert_action" => "%{[alert][action]}"
#            "alert_gid" => "%{[alert][gid]}"
#            "alert_signature_id" => "%{[alert][signature_id]}"
#            "alert_rev" => "%{[alert][rev]}"
#            "alert_signature" => "%{[alert][signature]}"
#            "alert_category" => "%{[alert][category]}"
#            "alert_severity" => "%{[alert][severity]}"
#            "domain" => "%{[fields][domain]}"
#          }
#          coerce_values => {
#            "flow_id" => "integer"
#            "src_port" => "integer"
#            "dest_port" => "integer"
#            "drop_len" => "integer"
#            "drop_tos" => "integer"
#            "drop_ttl" => "integer"
#            "drop_ipid" => "integer"
#            "drop_tcpseq" => "integer"
#            "drop_tcpack" => "integer"
#            "drop_tcpwin" => "integer"
#            "drop_tcpres" => "integer"
#            "drop_tcpurgp" => "integer"
#            "alert_gid" => "integer"
#            "alert_signature_id" => "integer"
#            "alert_rev" => "integer"
#            "alert_severity" => "integer"
#          }
#          measurement => "suricata_drop"
#          use_event_fields_for_data_points => false
#          allow_time_override => true
#          time_precision => "ms"
#          send_as_tags => [ "domain", "az", "ciap", "env", "fonction", "region", "stage", "genre" ]
#          db => "{{ item[0].domain | replace('.', '_') }}"
#          ssl => true
#       }
#     }
    }
  }
}
